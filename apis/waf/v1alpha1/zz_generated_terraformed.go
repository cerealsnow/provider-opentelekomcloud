// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	"github.com/pkg/errors"

	"github.com/crossplane/upjet/pkg/resource"
	"github.com/crossplane/upjet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this DedicatedAlarmMaskingRuleV1
func (mg *DedicatedAlarmMaskingRuleV1) GetTerraformResourceType() string {
	return "opentelekomcloud_waf_dedicated_alarm_masking_rule_v1"
}

// GetConnectionDetailsMapping for this DedicatedAlarmMaskingRuleV1
func (tr *DedicatedAlarmMaskingRuleV1) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DedicatedAlarmMaskingRuleV1
func (tr *DedicatedAlarmMaskingRuleV1) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DedicatedAlarmMaskingRuleV1
func (tr *DedicatedAlarmMaskingRuleV1) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DedicatedAlarmMaskingRuleV1
func (tr *DedicatedAlarmMaskingRuleV1) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DedicatedAlarmMaskingRuleV1
func (tr *DedicatedAlarmMaskingRuleV1) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DedicatedAlarmMaskingRuleV1
func (tr *DedicatedAlarmMaskingRuleV1) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this DedicatedAlarmMaskingRuleV1
func (tr *DedicatedAlarmMaskingRuleV1) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this DedicatedAlarmMaskingRuleV1 using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DedicatedAlarmMaskingRuleV1) LateInitialize(attrs []byte) (bool, error) {
	params := &DedicatedAlarmMaskingRuleV1Parameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DedicatedAlarmMaskingRuleV1) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DedicatedAntiCrawlerRuleV1
func (mg *DedicatedAntiCrawlerRuleV1) GetTerraformResourceType() string {
	return "opentelekomcloud_waf_dedicated_anti_crawler_rule_v1"
}

// GetConnectionDetailsMapping for this DedicatedAntiCrawlerRuleV1
func (tr *DedicatedAntiCrawlerRuleV1) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DedicatedAntiCrawlerRuleV1
func (tr *DedicatedAntiCrawlerRuleV1) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DedicatedAntiCrawlerRuleV1
func (tr *DedicatedAntiCrawlerRuleV1) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DedicatedAntiCrawlerRuleV1
func (tr *DedicatedAntiCrawlerRuleV1) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DedicatedAntiCrawlerRuleV1
func (tr *DedicatedAntiCrawlerRuleV1) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DedicatedAntiCrawlerRuleV1
func (tr *DedicatedAntiCrawlerRuleV1) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this DedicatedAntiCrawlerRuleV1
func (tr *DedicatedAntiCrawlerRuleV1) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this DedicatedAntiCrawlerRuleV1 using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DedicatedAntiCrawlerRuleV1) LateInitialize(attrs []byte) (bool, error) {
	params := &DedicatedAntiCrawlerRuleV1Parameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DedicatedAntiCrawlerRuleV1) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DedicatedAntiLeakageRuleV1
func (mg *DedicatedAntiLeakageRuleV1) GetTerraformResourceType() string {
	return "opentelekomcloud_waf_dedicated_anti_leakage_rule_v1"
}

// GetConnectionDetailsMapping for this DedicatedAntiLeakageRuleV1
func (tr *DedicatedAntiLeakageRuleV1) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DedicatedAntiLeakageRuleV1
func (tr *DedicatedAntiLeakageRuleV1) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DedicatedAntiLeakageRuleV1
func (tr *DedicatedAntiLeakageRuleV1) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DedicatedAntiLeakageRuleV1
func (tr *DedicatedAntiLeakageRuleV1) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DedicatedAntiLeakageRuleV1
func (tr *DedicatedAntiLeakageRuleV1) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DedicatedAntiLeakageRuleV1
func (tr *DedicatedAntiLeakageRuleV1) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this DedicatedAntiLeakageRuleV1
func (tr *DedicatedAntiLeakageRuleV1) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this DedicatedAntiLeakageRuleV1 using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DedicatedAntiLeakageRuleV1) LateInitialize(attrs []byte) (bool, error) {
	params := &DedicatedAntiLeakageRuleV1Parameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DedicatedAntiLeakageRuleV1) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DedicatedBlacklistRuleV1
func (mg *DedicatedBlacklistRuleV1) GetTerraformResourceType() string {
	return "opentelekomcloud_waf_dedicated_blacklist_rule_v1"
}

// GetConnectionDetailsMapping for this DedicatedBlacklistRuleV1
func (tr *DedicatedBlacklistRuleV1) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DedicatedBlacklistRuleV1
func (tr *DedicatedBlacklistRuleV1) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DedicatedBlacklistRuleV1
func (tr *DedicatedBlacklistRuleV1) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DedicatedBlacklistRuleV1
func (tr *DedicatedBlacklistRuleV1) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DedicatedBlacklistRuleV1
func (tr *DedicatedBlacklistRuleV1) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DedicatedBlacklistRuleV1
func (tr *DedicatedBlacklistRuleV1) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this DedicatedBlacklistRuleV1
func (tr *DedicatedBlacklistRuleV1) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this DedicatedBlacklistRuleV1 using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DedicatedBlacklistRuleV1) LateInitialize(attrs []byte) (bool, error) {
	params := &DedicatedBlacklistRuleV1Parameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DedicatedBlacklistRuleV1) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DedicatedCcRuleV1
func (mg *DedicatedCcRuleV1) GetTerraformResourceType() string {
	return "opentelekomcloud_waf_dedicated_cc_rule_v1"
}

// GetConnectionDetailsMapping for this DedicatedCcRuleV1
func (tr *DedicatedCcRuleV1) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DedicatedCcRuleV1
func (tr *DedicatedCcRuleV1) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DedicatedCcRuleV1
func (tr *DedicatedCcRuleV1) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DedicatedCcRuleV1
func (tr *DedicatedCcRuleV1) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DedicatedCcRuleV1
func (tr *DedicatedCcRuleV1) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DedicatedCcRuleV1
func (tr *DedicatedCcRuleV1) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this DedicatedCcRuleV1
func (tr *DedicatedCcRuleV1) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this DedicatedCcRuleV1 using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DedicatedCcRuleV1) LateInitialize(attrs []byte) (bool, error) {
	params := &DedicatedCcRuleV1Parameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DedicatedCcRuleV1) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DedicatedCertificateV1
func (mg *DedicatedCertificateV1) GetTerraformResourceType() string {
	return "opentelekomcloud_waf_dedicated_certificate_v1"
}

// GetConnectionDetailsMapping for this DedicatedCertificateV1
func (tr *DedicatedCertificateV1) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DedicatedCertificateV1
func (tr *DedicatedCertificateV1) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DedicatedCertificateV1
func (tr *DedicatedCertificateV1) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DedicatedCertificateV1
func (tr *DedicatedCertificateV1) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DedicatedCertificateV1
func (tr *DedicatedCertificateV1) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DedicatedCertificateV1
func (tr *DedicatedCertificateV1) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this DedicatedCertificateV1
func (tr *DedicatedCertificateV1) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this DedicatedCertificateV1 using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DedicatedCertificateV1) LateInitialize(attrs []byte) (bool, error) {
	params := &DedicatedCertificateV1Parameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DedicatedCertificateV1) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DedicatedDataMaskingRuleV1
func (mg *DedicatedDataMaskingRuleV1) GetTerraformResourceType() string {
	return "opentelekomcloud_waf_dedicated_data_masking_rule_v1"
}

// GetConnectionDetailsMapping for this DedicatedDataMaskingRuleV1
func (tr *DedicatedDataMaskingRuleV1) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DedicatedDataMaskingRuleV1
func (tr *DedicatedDataMaskingRuleV1) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DedicatedDataMaskingRuleV1
func (tr *DedicatedDataMaskingRuleV1) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DedicatedDataMaskingRuleV1
func (tr *DedicatedDataMaskingRuleV1) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DedicatedDataMaskingRuleV1
func (tr *DedicatedDataMaskingRuleV1) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DedicatedDataMaskingRuleV1
func (tr *DedicatedDataMaskingRuleV1) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this DedicatedDataMaskingRuleV1
func (tr *DedicatedDataMaskingRuleV1) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this DedicatedDataMaskingRuleV1 using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DedicatedDataMaskingRuleV1) LateInitialize(attrs []byte) (bool, error) {
	params := &DedicatedDataMaskingRuleV1Parameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DedicatedDataMaskingRuleV1) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DedicatedDomainV1
func (mg *DedicatedDomainV1) GetTerraformResourceType() string {
	return "opentelekomcloud_waf_dedicated_domain_v1"
}

// GetConnectionDetailsMapping for this DedicatedDomainV1
func (tr *DedicatedDomainV1) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DedicatedDomainV1
func (tr *DedicatedDomainV1) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DedicatedDomainV1
func (tr *DedicatedDomainV1) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DedicatedDomainV1
func (tr *DedicatedDomainV1) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DedicatedDomainV1
func (tr *DedicatedDomainV1) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DedicatedDomainV1
func (tr *DedicatedDomainV1) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this DedicatedDomainV1
func (tr *DedicatedDomainV1) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this DedicatedDomainV1 using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DedicatedDomainV1) LateInitialize(attrs []byte) (bool, error) {
	params := &DedicatedDomainV1Parameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DedicatedDomainV1) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DedicatedGeoIPRuleV1
func (mg *DedicatedGeoIPRuleV1) GetTerraformResourceType() string {
	return "opentelekomcloud_waf_dedicated_geo_ip_rule_v1"
}

// GetConnectionDetailsMapping for this DedicatedGeoIPRuleV1
func (tr *DedicatedGeoIPRuleV1) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DedicatedGeoIPRuleV1
func (tr *DedicatedGeoIPRuleV1) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DedicatedGeoIPRuleV1
func (tr *DedicatedGeoIPRuleV1) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DedicatedGeoIPRuleV1
func (tr *DedicatedGeoIPRuleV1) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DedicatedGeoIPRuleV1
func (tr *DedicatedGeoIPRuleV1) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DedicatedGeoIPRuleV1
func (tr *DedicatedGeoIPRuleV1) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this DedicatedGeoIPRuleV1
func (tr *DedicatedGeoIPRuleV1) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this DedicatedGeoIPRuleV1 using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DedicatedGeoIPRuleV1) LateInitialize(attrs []byte) (bool, error) {
	params := &DedicatedGeoIPRuleV1Parameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DedicatedGeoIPRuleV1) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DedicatedInstanceV1
func (mg *DedicatedInstanceV1) GetTerraformResourceType() string {
	return "opentelekomcloud_waf_dedicated_instance_v1"
}

// GetConnectionDetailsMapping for this DedicatedInstanceV1
func (tr *DedicatedInstanceV1) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DedicatedInstanceV1
func (tr *DedicatedInstanceV1) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DedicatedInstanceV1
func (tr *DedicatedInstanceV1) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DedicatedInstanceV1
func (tr *DedicatedInstanceV1) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DedicatedInstanceV1
func (tr *DedicatedInstanceV1) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DedicatedInstanceV1
func (tr *DedicatedInstanceV1) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this DedicatedInstanceV1
func (tr *DedicatedInstanceV1) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this DedicatedInstanceV1 using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DedicatedInstanceV1) LateInitialize(attrs []byte) (bool, error) {
	params := &DedicatedInstanceV1Parameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DedicatedInstanceV1) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DedicatedKnownAttackSourceRuleV1
func (mg *DedicatedKnownAttackSourceRuleV1) GetTerraformResourceType() string {
	return "opentelekomcloud_waf_dedicated_known_attack_source_rule_v1"
}

// GetConnectionDetailsMapping for this DedicatedKnownAttackSourceRuleV1
func (tr *DedicatedKnownAttackSourceRuleV1) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DedicatedKnownAttackSourceRuleV1
func (tr *DedicatedKnownAttackSourceRuleV1) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DedicatedKnownAttackSourceRuleV1
func (tr *DedicatedKnownAttackSourceRuleV1) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DedicatedKnownAttackSourceRuleV1
func (tr *DedicatedKnownAttackSourceRuleV1) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DedicatedKnownAttackSourceRuleV1
func (tr *DedicatedKnownAttackSourceRuleV1) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DedicatedKnownAttackSourceRuleV1
func (tr *DedicatedKnownAttackSourceRuleV1) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this DedicatedKnownAttackSourceRuleV1
func (tr *DedicatedKnownAttackSourceRuleV1) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this DedicatedKnownAttackSourceRuleV1 using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DedicatedKnownAttackSourceRuleV1) LateInitialize(attrs []byte) (bool, error) {
	params := &DedicatedKnownAttackSourceRuleV1Parameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DedicatedKnownAttackSourceRuleV1) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DedicatedPolicyV1
func (mg *DedicatedPolicyV1) GetTerraformResourceType() string {
	return "opentelekomcloud_waf_dedicated_policy_v1"
}

// GetConnectionDetailsMapping for this DedicatedPolicyV1
func (tr *DedicatedPolicyV1) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DedicatedPolicyV1
func (tr *DedicatedPolicyV1) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DedicatedPolicyV1
func (tr *DedicatedPolicyV1) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DedicatedPolicyV1
func (tr *DedicatedPolicyV1) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DedicatedPolicyV1
func (tr *DedicatedPolicyV1) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DedicatedPolicyV1
func (tr *DedicatedPolicyV1) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this DedicatedPolicyV1
func (tr *DedicatedPolicyV1) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this DedicatedPolicyV1 using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DedicatedPolicyV1) LateInitialize(attrs []byte) (bool, error) {
	params := &DedicatedPolicyV1Parameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DedicatedPolicyV1) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DedicatedPreciseProtectionRuleV1
func (mg *DedicatedPreciseProtectionRuleV1) GetTerraformResourceType() string {
	return "opentelekomcloud_waf_dedicated_precise_protection_rule_v1"
}

// GetConnectionDetailsMapping for this DedicatedPreciseProtectionRuleV1
func (tr *DedicatedPreciseProtectionRuleV1) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DedicatedPreciseProtectionRuleV1
func (tr *DedicatedPreciseProtectionRuleV1) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DedicatedPreciseProtectionRuleV1
func (tr *DedicatedPreciseProtectionRuleV1) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DedicatedPreciseProtectionRuleV1
func (tr *DedicatedPreciseProtectionRuleV1) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DedicatedPreciseProtectionRuleV1
func (tr *DedicatedPreciseProtectionRuleV1) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DedicatedPreciseProtectionRuleV1
func (tr *DedicatedPreciseProtectionRuleV1) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this DedicatedPreciseProtectionRuleV1
func (tr *DedicatedPreciseProtectionRuleV1) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this DedicatedPreciseProtectionRuleV1 using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DedicatedPreciseProtectionRuleV1) LateInitialize(attrs []byte) (bool, error) {
	params := &DedicatedPreciseProtectionRuleV1Parameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DedicatedPreciseProtectionRuleV1) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DedicatedReferenceTableV1
func (mg *DedicatedReferenceTableV1) GetTerraformResourceType() string {
	return "opentelekomcloud_waf_dedicated_reference_table_v1"
}

// GetConnectionDetailsMapping for this DedicatedReferenceTableV1
func (tr *DedicatedReferenceTableV1) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DedicatedReferenceTableV1
func (tr *DedicatedReferenceTableV1) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DedicatedReferenceTableV1
func (tr *DedicatedReferenceTableV1) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DedicatedReferenceTableV1
func (tr *DedicatedReferenceTableV1) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DedicatedReferenceTableV1
func (tr *DedicatedReferenceTableV1) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DedicatedReferenceTableV1
func (tr *DedicatedReferenceTableV1) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this DedicatedReferenceTableV1
func (tr *DedicatedReferenceTableV1) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this DedicatedReferenceTableV1 using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DedicatedReferenceTableV1) LateInitialize(attrs []byte) (bool, error) {
	params := &DedicatedReferenceTableV1Parameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DedicatedReferenceTableV1) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DedicatedWebTamperRuleV1
func (mg *DedicatedWebTamperRuleV1) GetTerraformResourceType() string {
	return "opentelekomcloud_waf_dedicated_web_tamper_rule_v1"
}

// GetConnectionDetailsMapping for this DedicatedWebTamperRuleV1
func (tr *DedicatedWebTamperRuleV1) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DedicatedWebTamperRuleV1
func (tr *DedicatedWebTamperRuleV1) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DedicatedWebTamperRuleV1
func (tr *DedicatedWebTamperRuleV1) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DedicatedWebTamperRuleV1
func (tr *DedicatedWebTamperRuleV1) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DedicatedWebTamperRuleV1
func (tr *DedicatedWebTamperRuleV1) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DedicatedWebTamperRuleV1
func (tr *DedicatedWebTamperRuleV1) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this DedicatedWebTamperRuleV1
func (tr *DedicatedWebTamperRuleV1) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this DedicatedWebTamperRuleV1 using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DedicatedWebTamperRuleV1) LateInitialize(attrs []byte) (bool, error) {
	params := &DedicatedWebTamperRuleV1Parameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DedicatedWebTamperRuleV1) GetTerraformSchemaVersion() int {
	return 0
}
