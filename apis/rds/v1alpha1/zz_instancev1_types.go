// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BackupstrategyInitParameters struct {

	// Specifies the number of days to retain the generated backup files.
	// Its value range is 0 to 35. If this parameter is not specified or set to 0, the
	// automated backup policy is disabled.
	Keepdays *float64 `json:"keepdays,omitempty" tf:"keepdays,omitempty"`

	// Indicates the backup start time that has been set.
	// The backup task will be triggered within one hour after the backup start time.
	// Valid value: The value cannot be empty. It must use the hh:mm:ss format and
	// must be valid. The current time is the UTC time.
	Starttime *string `json:"starttime,omitempty" tf:"starttime,omitempty"`
}

type BackupstrategyObservation struct {

	// Specifies the number of days to retain the generated backup files.
	// Its value range is 0 to 35. If this parameter is not specified or set to 0, the
	// automated backup policy is disabled.
	Keepdays *float64 `json:"keepdays,omitempty" tf:"keepdays,omitempty"`

	// Indicates the backup start time that has been set.
	// The backup task will be triggered within one hour after the backup start time.
	// Valid value: The value cannot be empty. It must use the hh:mm:ss format and
	// must be valid. The current time is the UTC time.
	Starttime *string `json:"starttime,omitempty" tf:"starttime,omitempty"`
}

type BackupstrategyParameters struct {

	// Specifies the number of days to retain the generated backup files.
	// Its value range is 0 to 35. If this parameter is not specified or set to 0, the
	// automated backup policy is disabled.
	// +kubebuilder:validation:Optional
	Keepdays *float64 `json:"keepdays,omitempty" tf:"keepdays,omitempty"`

	// Indicates the backup start time that has been set.
	// The backup task will be triggered within one hour after the backup start time.
	// Valid value: The value cannot be empty. It must use the hh:mm:ss format and
	// must be valid. The current time is the UTC time.
	// +kubebuilder:validation:Optional
	Starttime *string `json:"starttime,omitempty" tf:"starttime,omitempty"`
}

type DatastoreInitParameters struct {

	// Specifies the DB engine. Currently, MySQL, PostgreSQL, and
	// Microsoft SQL Server are supported. The value is MySQL, PostgreSQL, or SQLServer.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Specifies the DB instance version.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type DatastoreObservation struct {

	// Specifies the DB engine. Currently, MySQL, PostgreSQL, and
	// Microsoft SQL Server are supported. The value is MySQL, PostgreSQL, or SQLServer.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Specifies the DB instance version.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type DatastoreParameters struct {

	// Specifies the DB engine. Currently, MySQL, PostgreSQL, and
	// Microsoft SQL Server are supported. The value is MySQL, PostgreSQL, or SQLServer.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// Specifies the DB instance version.
	// +kubebuilder:validation:Optional
	Version *string `json:"version" tf:"version,omitempty"`
}

type HaInitParameters struct {

	// Specifies the configured parameters on the HA.
	// Valid value: The value is true or false. The value true indicates creating
	// HA DB instances. The value false indicates creating a single DB instance.
	Enable *bool `json:"enable,omitempty" tf:"enable,omitempty"`

	// Specifies the replication mode for the standby DB instance.
	// The value cannot be empty.
	// For MySQL, the value is async or semisync.
	// For PostgreSQL, the value is async or sync.
	Replicationmode *string `json:"replicationmode,omitempty" tf:"replicationmode,omitempty"`
}

type HaObservation struct {

	// Specifies the configured parameters on the HA.
	// Valid value: The value is true or false. The value true indicates creating
	// HA DB instances. The value false indicates creating a single DB instance.
	Enable *bool `json:"enable,omitempty" tf:"enable,omitempty"`

	// Specifies the replication mode for the standby DB instance.
	// The value cannot be empty.
	// For MySQL, the value is async or semisync.
	// For PostgreSQL, the value is async or sync.
	Replicationmode *string `json:"replicationmode,omitempty" tf:"replicationmode,omitempty"`
}

type HaParameters struct {

	// Specifies the configured parameters on the HA.
	// Valid value: The value is true or false. The value true indicates creating
	// HA DB instances. The value false indicates creating a single DB instance.
	// +kubebuilder:validation:Optional
	Enable *bool `json:"enable,omitempty" tf:"enable,omitempty"`

	// Specifies the replication mode for the standby DB instance.
	// The value cannot be empty.
	// For MySQL, the value is async or semisync.
	// For PostgreSQL, the value is async or sync.
	// +kubebuilder:validation:Optional
	Replicationmode *string `json:"replicationmode,omitempty" tf:"replicationmode,omitempty"`
}

type InstanceV1InitParameters struct {

	// Specifies the ID of the AZ.
	Availabilityzone *string `json:"availabilityzone,omitempty" tf:"availabilityzone,omitempty"`

	// Specifies the advanced backup policy. The structure
	// is described below.
	Backupstrategy []BackupstrategyInitParameters `json:"backupstrategy,omitempty" tf:"backupstrategy,omitempty"`

	// Specifies database information. The structure is
	// described below.
	Datastore []DatastoreInitParameters `json:"datastore,omitempty" tf:"datastore,omitempty"`

	// Specifies the database port number.
	Dbport *string `json:"dbport,omitempty" tf:"dbport,omitempty"`

	// Specifies the password for user root of the database.
	Dbrtpd *string `json:"dbrtpd,omitempty" tf:"dbrtpd,omitempty"`

	// Specifies the specification ID (flavors.id in the
	// response message in Obtaining All DB Instance Specifications). If you want
	// to enable ha for the rds instance, a flavor with ha speccode is required.
	Flavorref *string `json:"flavorref,omitempty" tf:"flavorref,omitempty"`

	// Specifies the parameters configured on HA and is used when
	// creating HA DB instances. The structure is described below. NOTICE:
	// RDS for Microsoft SQL Server does not support creating HA DB instances and
	// this parameter is not involved.
	Ha []HaInitParameters `json:"ha,omitempty" tf:"ha,omitempty"`

	// Specifies the DB instance name. The DB instance name of
	// the same type is unique in the same tenant. The changes of the instance name
	// will be suppressed in HA scenario.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the nics information. For details about how
	// to obtain this parameter value, see section "Subnet" in the Virtual Private
	// Cloud API Reference. The structure is described below.
	Nics []NicsInitParameters `json:"nics,omitempty" tf:"nics,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the security group which the RDS DB
	// instance belongs to. The structure is described below.
	Securitygroup []SecuritygroupInitParameters `json:"securitygroup,omitempty" tf:"securitygroup,omitempty"`

	// Tags key/value pairs to associate with the instance.
	Tag map[string]*string `json:"tag,omitempty" tf:"tag,omitempty"`

	// Specifies the VPC ID. For details about how to obtain this
	// parameter value, see section "Virtual Private Cloud" in the Virtual Private
	// Cloud API Reference.
	VPC *string `json:"vpc,omitempty" tf:"vpc,omitempty"`

	// Specifies the volume information. The structure is described
	// below.
	Volume []VolumeInitParameters `json:"volume,omitempty" tf:"volume,omitempty"`
}

type InstanceV1Observation struct {

	// Specifies the ID of the AZ.
	Availabilityzone *string `json:"availabilityzone,omitempty" tf:"availabilityzone,omitempty"`

	// Specifies the advanced backup policy. The structure
	// is described below.
	Backupstrategy []BackupstrategyObservation `json:"backupstrategy,omitempty" tf:"backupstrategy,omitempty"`

	// Indicates the creation time in the following format: yyyy-mm-dd Thh:mm:ssZ.
	Created *string `json:"created,omitempty" tf:"created,omitempty"`

	// Specifies database information. The structure is
	// described below.
	Datastore []DatastoreObservation `json:"datastore,omitempty" tf:"datastore,omitempty"`

	// Specifies the database port number.
	Dbport *string `json:"dbport,omitempty" tf:"dbport,omitempty"`

	// Specifies the password for user root of the database.
	Dbrtpd *string `json:"dbrtpd,omitempty" tf:"dbrtpd,omitempty"`

	// Specifies the specification ID (flavors.id in the
	// response message in Obtaining All DB Instance Specifications). If you want
	// to enable ha for the rds instance, a flavor with ha speccode is required.
	Flavorref *string `json:"flavorref,omitempty" tf:"flavorref,omitempty"`

	// Specifies the parameters configured on HA and is used when
	// creating HA DB instances. The structure is described below. NOTICE:
	// RDS for Microsoft SQL Server does not support creating HA DB instances and
	// this parameter is not involved.
	Ha []HaObservation `json:"ha,omitempty" tf:"ha,omitempty"`

	// Indicates the instance connection address. It is a blank string.
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// Specifies the ID obtained from the securitygroup.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the DB instance name. The DB instance name of
	// the same type is unique in the same tenant. The changes of the instance name
	// will be suppressed in HA scenario.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the nics information. For details about how
	// to obtain this parameter value, see section "Subnet" in the Virtual Private
	// Cloud API Reference. The structure is described below.
	Nics []NicsObservation `json:"nics,omitempty" tf:"nics,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the security group which the RDS DB
	// instance belongs to. The structure is described below.
	Securitygroup []SecuritygroupObservation `json:"securitygroup,omitempty" tf:"securitygroup,omitempty"`

	// Indicates the DB instance status.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Tags key/value pairs to associate with the instance.
	Tag map[string]*string `json:"tag,omitempty" tf:"tag,omitempty"`

	// Indicates the DB instance type, which can be master or readreplica.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Indicates the update time in the following format: yyyy-mm-dd Thh:mm:ssZ.
	Updated *string `json:"updated,omitempty" tf:"updated,omitempty"`

	// Specifies the VPC ID. For details about how to obtain this
	// parameter value, see section "Virtual Private Cloud" in the Virtual Private
	// Cloud API Reference.
	VPC *string `json:"vpc,omitempty" tf:"vpc,omitempty"`

	// Specifies the volume information. The structure is described
	// below.
	Volume []VolumeObservation `json:"volume,omitempty" tf:"volume,omitempty"`
}

type InstanceV1Parameters struct {

	// Specifies the ID of the AZ.
	// +kubebuilder:validation:Optional
	Availabilityzone *string `json:"availabilityzone,omitempty" tf:"availabilityzone,omitempty"`

	// Specifies the advanced backup policy. The structure
	// is described below.
	// +kubebuilder:validation:Optional
	Backupstrategy []BackupstrategyParameters `json:"backupstrategy,omitempty" tf:"backupstrategy,omitempty"`

	// Specifies database information. The structure is
	// described below.
	// +kubebuilder:validation:Optional
	Datastore []DatastoreParameters `json:"datastore,omitempty" tf:"datastore,omitempty"`

	// Specifies the database port number.
	// +kubebuilder:validation:Optional
	Dbport *string `json:"dbport,omitempty" tf:"dbport,omitempty"`

	// Specifies the password for user root of the database.
	// +kubebuilder:validation:Optional
	Dbrtpd *string `json:"dbrtpd,omitempty" tf:"dbrtpd,omitempty"`

	// Specifies the specification ID (flavors.id in the
	// response message in Obtaining All DB Instance Specifications). If you want
	// to enable ha for the rds instance, a flavor with ha speccode is required.
	// +kubebuilder:validation:Optional
	Flavorref *string `json:"flavorref,omitempty" tf:"flavorref,omitempty"`

	// Specifies the parameters configured on HA and is used when
	// creating HA DB instances. The structure is described below. NOTICE:
	// RDS for Microsoft SQL Server does not support creating HA DB instances and
	// this parameter is not involved.
	// +kubebuilder:validation:Optional
	Ha []HaParameters `json:"ha,omitempty" tf:"ha,omitempty"`

	// Specifies the DB instance name. The DB instance name of
	// the same type is unique in the same tenant. The changes of the instance name
	// will be suppressed in HA scenario.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the nics information. For details about how
	// to obtain this parameter value, see section "Subnet" in the Virtual Private
	// Cloud API Reference. The structure is described below.
	// +kubebuilder:validation:Optional
	Nics []NicsParameters `json:"nics,omitempty" tf:"nics,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the security group which the RDS DB
	// instance belongs to. The structure is described below.
	// +kubebuilder:validation:Optional
	Securitygroup []SecuritygroupParameters `json:"securitygroup,omitempty" tf:"securitygroup,omitempty"`

	// Tags key/value pairs to associate with the instance.
	// +kubebuilder:validation:Optional
	Tag map[string]*string `json:"tag,omitempty" tf:"tag,omitempty"`

	// Specifies the VPC ID. For details about how to obtain this
	// parameter value, see section "Virtual Private Cloud" in the Virtual Private
	// Cloud API Reference.
	// +kubebuilder:validation:Optional
	VPC *string `json:"vpc,omitempty" tf:"vpc,omitempty"`

	// Specifies the volume information. The structure is described
	// below.
	// +kubebuilder:validation:Optional
	Volume []VolumeParameters `json:"volume,omitempty" tf:"volume,omitempty"`
}

type NicsInitParameters struct {
	Subnetid *string `json:"subnetid,omitempty" tf:"subnetid,omitempty"`
}

type NicsObservation struct {
	Subnetid *string `json:"subnetid,omitempty" tf:"subnetid,omitempty"`
}

type NicsParameters struct {

	// +kubebuilder:validation:Optional
	Subnetid *string `json:"subnetid" tf:"subnetid,omitempty"`
}

type SecuritygroupInitParameters struct {

	// Specifies the ID obtained from the securitygroup.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SecuritygroupObservation struct {

	// Specifies the ID obtained from the securitygroup.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SecuritygroupParameters struct {

	// Specifies the ID obtained from the securitygroup.
	// +kubebuilder:validation:Optional
	ID *string `json:"id" tf:"id,omitempty"`
}

type VolumeInitParameters struct {

	// Specifies the volume size.
	// Its value must be a multiple of 10 and the value range is 100 GB to 2000 GB.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// Specifies the volume type. Valid value:
	// It must be COMMON (SATA) or ULTRAHIGH (SSD) and is case-sensitive.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VolumeObservation struct {

	// Specifies the volume size.
	// Its value must be a multiple of 10 and the value range is 100 GB to 2000 GB.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// Specifies the volume type. Valid value:
	// It must be COMMON (SATA) or ULTRAHIGH (SSD) and is case-sensitive.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VolumeParameters struct {

	// Specifies the volume size.
	// Its value must be a multiple of 10 and the value range is 100 GB to 2000 GB.
	// +kubebuilder:validation:Optional
	Size *float64 `json:"size" tf:"size,omitempty"`

	// Specifies the volume type. Valid value:
	// It must be COMMON (SATA) or ULTRAHIGH (SSD) and is case-sensitive.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

// InstanceV1Spec defines the desired state of InstanceV1
type InstanceV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InstanceV1Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider InstanceV1InitParameters `json:"initProvider,omitempty"`
}

// InstanceV1Status defines the observed state of InstanceV1.
type InstanceV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InstanceV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// InstanceV1 is the Schema for the InstanceV1s API. Manages an RDS Instance v1 resource within OpenTelekomCloud.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opentelekomcloud}
type InstanceV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.availabilityzone) || (has(self.initProvider) && has(self.initProvider.availabilityzone))",message="spec.forProvider.availabilityzone is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.datastore) || (has(self.initProvider) && has(self.initProvider.datastore))",message="spec.forProvider.datastore is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.dbrtpd) || (has(self.initProvider) && has(self.initProvider.dbrtpd))",message="spec.forProvider.dbrtpd is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.flavorref) || (has(self.initProvider) && has(self.initProvider.flavorref))",message="spec.forProvider.flavorref is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.nics) || (has(self.initProvider) && has(self.initProvider.nics))",message="spec.forProvider.nics is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.securitygroup) || (has(self.initProvider) && has(self.initProvider.securitygroup))",message="spec.forProvider.securitygroup is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.volume) || (has(self.initProvider) && has(self.initProvider.volume))",message="spec.forProvider.volume is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.vpc) || (has(self.initProvider) && has(self.initProvider.vpc))",message="spec.forProvider.vpc is a required parameter"
	Spec   InstanceV1Spec   `json:"spec"`
	Status InstanceV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InstanceV1List contains a list of InstanceV1s
type InstanceV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []InstanceV1 `json:"items"`
}

// Repository type metadata.
var (
	InstanceV1_Kind             = "InstanceV1"
	InstanceV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: InstanceV1_Kind}.String()
	InstanceV1_KindAPIVersion   = InstanceV1_Kind + "." + CRDGroupVersion.String()
	InstanceV1_GroupVersionKind = CRDGroupVersion.WithKind(InstanceV1_Kind)
)

func init() {
	SchemeBuilder.Register(&InstanceV1{}, &InstanceV1List{})
}
